% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom_labelcontour.R
\docType{data}
\name{geom_labelcontour}
\alias{geom_labelcontour}
\alias{stat_labelcontour}
\alias{GeomLabelContour}
\alias{StatLabelContour}
\title{Produce labelled contour lines in  \pkg{ggplot2}}
\usage{
geom_labelcontour(
  mapping = NULL,
  data = NULL,
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  lineend = "butt",
  linejoin = "round",
  linemitre = 10,
  cut_path = NA,
  flip_inverted = TRUE,
  offset = NULL,
  keep_straight = FALSE,
  bins = NULL,
  binwidth = NULL,
  breaks = NULL,
  ...
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}} or
\code{\link[ggplot2:aes_]{aes_()}}. If specified and \code{inherit.aes = TRUE} (the
default), it is combined with the default mapping at the top level of the
plot. You must supply \code{mapping} if there is no plot mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{position}{Position adjustment, either as a string, or the result of
a call to a position adjustment function.}

\item{na.rm}{If \code{FALSE} (default), missing points or labels are removed from
the text path with a warning.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}

\item{lineend}{Line end style (round, butt, square).}

\item{linejoin}{Line join style (round, mitre, bevel).}

\item{linemitre}{Line mitre limit (number greater than 1).}

\item{cut_path}{A \code{logical(1)} which if \code{TRUE} breaks the path
into two sections, one on either side of the string. If \code{FALSE}, the
path is plotted as a whole. The default, \code{NA}, will break the line if the
string has a \code{vjust} of between 0 and 1.}

\item{flip_inverted}{A \code{logical(1)} which if \code{TRUE} (default), inverts any
string where the majority of letters would be upside down along the path
are inverted to improve legibility. If \code{FALSE} letters are left as-is.}

\item{offset}{A \code{\link[grid:unit]{unit()}} of length 1 to determine the offset
of the text from the path. If not \code{NULL}, this overrules the \code{vjust}
setting.}

\item{keep_straight}{a logical \strong{TRUE} or \strong{FALSE} indicating whether the
text should be straight rather than following the curve. This might be
helpful for noisy paths. If \strong{TRUE} the text will still follow the angle
of the curve. The default is \strong{FALSE}}

\item{bins}{Number of contour bins. Overridden by \code{binwidth}.}

\item{binwidth}{The width of the contour bins. Overridden by \code{breaks}.}

\item{breaks}{Numeric vector to set the contour breaks.
Overrides \code{binwidth} and \code{bins}. By default, this is a vector of
length ten with \code{\link[=pretty]{pretty()}} breaks.}

\item{...}{other arguments passed on to \code{\link[ggplot2:layer]{layer()}}.
These are often aesthetics, used to set an aesthetic to a fixed value,
like \code{colour = "red"} or \code{size = 3}. They may also be parameters to the
paired geom/stat.}
}
\description{
Contour lines are available already in \pkg{ggplot2}, but the
native \code{\link[ggplot2:geom_contour]{geom_contour}} does not allow the lines to
be labelled with the level of each contour. \code{geom_labelcontour} adds this
ability.
}
\section{Aesthetics}{

The \code{spacing} aesthetic allows fine control of spacing of text,
which is called 'tracking' in typography. The default is 0 and units are
measured in 1/1000 em. Numbers greater than zero increase the spacing,
whereas negative numbers decrease the spacing.
\code{geom_labelcontour()} understands the following aesthetics (required
aesthetics are in bold):
\itemize{
\item \strong{\code{x}}
\item \strong{\code{y}}
\item \strong{\code{z}}
\item \code{alpha}
\item \code{colour}
\item \code{family}
\item \code{fontface}
\item \code{group}
\item \code{hjust}
\item \code{size}
\item \code{vjust}
\item \code{linetype}
\item \code{linewidth}
\item \code{linecolour}
\item \code{spacing}
}
}

\examples{
set.seed(1)

df  <- data.frame(x = rnorm(100), y = rnorm(100))

ggplot(df, aes(x, y)) +
stat_density2d(geom = "textpath", aes(label = after_stat(level))) +
 theme_classic()
}
\keyword{datasets}
