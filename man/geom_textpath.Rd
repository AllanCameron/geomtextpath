% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom_textpath.R
\name{geom_textpath}
\alias{geom_textpath}
\title{Add Curved Text Along Paths in \code{ggplot2}}
\usage{
geom_textpath(
  mapping = NULL,
  data = NULL,
  stat = "identity",
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  ...,
  lineend = "butt",
  linejoin = "round",
  linemitre = 10,
  include_line = TRUE,
  cut_path = NA,
  flip_inverted = FALSE,
  halign = "left"
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}} or
\code{\link[ggplot2:aes_]{aes_()}}. If specified and \code{inherit.aes = TRUE} (the
default), it is combined with the default mapping at the top level of the
plot. You must supply \code{mapping} if there is no plot mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{stat}{The statistical transformation to use on the data for this
layer, as a string.}

\item{position}{Position adjustment, either as a string, or the result of
a call to a position adjustment function.}

\item{na.rm}{Removes missing points or labels from the text path.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}

\item{...}{other arguments passed on to \code{\link{layer}}. These are often
aesthetics, used to set an aesthetic to a fixed value, like \code{colour =
"red"} or \code{size = 3}. They may also be parameters to the paired
 geom/stat.}

\item{lineend}{Line end style (round, butt, square).}

\item{linejoin}{Line join style (round, mitre, bevel).}

\item{linemitre}{Line mitre limit (number greater than 1).}

\item{include_line}{A single logical TRUE or FALSE, indicating whether a
line should be plotted along with the text. If FALSE, any parameters or
aesthetics relating to the drawing of the line in the layer will be
ignored.}

\item{cut_path}{A single logical TRUE or FALSE which if TRUE breaks the path
into two sections, one on either side of the string and if FALSE leaves the
path unbroken. The default value is NA, which will break the line if the
string has a vjust of between 0 and 1.}

\item{flip_inverted}{If TRUE, any string where the majority of letters would
be upside down along the path are inverted to improve legibility. The
default is FALSE.}

\item{halign}{A \code{character(1)} describing how multi-line labels should
be justified. Can either be \code{"left"} (default), \code{"center"} or
\code{"right"}.}
}
\description{
The existing text-based geom layers in ggplot2
(\code{geom_text} and \code{geom_label}) are ideal for the majority of plots,
since typically textual annotations are short, straight and in line with the
axes of the plot. However, there are some occasions when it is useful to have
text follow a curved path. This may be to create or recreate a specific
visual effect, or it may be to label a circular / polar plot in a more
"natural" way.

There are limitations inherent in the plotting of text elements in
\code{ggplot} due to the way that the underlying \code{grid} graphics handles
text. A text string is dealt with as a zero-width object, and therefore the
rotation and spacing of the letters making up the string can only be dealt
with by treating each letter separately.

It is important to realise that the letters are only rotated, and do not
undergo any change in shape. Thus, for example, large text appearing on
convex curves will not be deformed so that individual letters are narrower at
the bottom and wider at the top. Doing so would require reinterpreting the
letters as polygons.

Another issue is that we may wish to use a short curved label on a much
longer path. Spacing the letters equally along the path would mean there is
too much space between the letters for the label to remain legible. A single
text string is therefore kept "together" according to the point size of the
text in \code{geom_textpath}. This then leaves the problem of where on the
path the text should be placed. This can be dealt with by the aesthetic
mapping \code{hjust}, which allows the user to place the labels
at the desired position along the path, including separate positions for
each label.

A final point to note is that a path is usually a group-based geom (i.e.
a path typically comprises x, y points from two columns over several rows of
a data frame), whereas text labels can come from single rows in a data frame.
This means that if we have a data frame with an x column, a y column and a
grouping variable column, there can only be a single label for the group.
Typically, this will be the grouping variable itself (see the examples,
particularly those using the built-in \code{iris} data set.)
}
\details{
The \code{spacing} aesthetic allows fine control of spacing of text,
  which is called 'tracking' in typography. The default is 0 and units are
  measured in 1/1000 em. Numbers greater than zero increase the spacing,
  whereas negative numbers decrease the spacing.
}
\section{Aesthetics}{

\code{geom_textpath()} understands the following aesthetics (required
aesthetics are in bold):
\itemize{
  \item \strong{\code{x}}
  \item \strong{\code{y}}
  \item \strong{\code{label}}
  \item \code{alpha}
  \item \code{colour}
  \item \code{family}
  \item \code{fontface}
  \item \code{group}
  \item \code{hjust}
  \item \code{size}
  \item \code{vjust}
  \item \code{hjust}
  \item \code{linetype}
  \item \code{linewidth}
  \item \code{spacing}
}
}

\examples{

# Plot text along an arbitrary path
 t <- seq(-1, 5, length.out = 1000) * pi
 spiral <- data.frame(
   x = rev(sin(t) * 1000:1),
   y = rev(cos(t) * 1000:1),
   s = seq(1, 10, length.out = 100),
   text = paste(
     "Like a circle in a spiral, like a wheel within a wheel,",
     "never ending or beginning on an ever spinning reel"
  )
)

 ggplot(spiral, aes(x, y, label = text)) +
   geom_textpath(size = 7, vjust = 2, linewidth = 0) +
   coord_equal(xlim = c(-1500, 1500), ylim = c(-1500, 1500))

# Produce labelled density lines:

# By default the paths are broken to allow the names in-line

 ggplot(iris, aes(x = Sepal.Length, colour = Species)) +
   geom_textpath(aes(label = Species), stat = "density",
                 size = 6, fontface = 2, hjust = 0.2, vjust = 0.3)

# If the vjust parameter moves the text above or below the line,
# the line is automatically filled in:

 ggplot(iris, aes(x = Sepal.Length, colour = Species)) +
   geom_textpath(aes(label = Species), stat = "density",
                 size = 6, fontface = 2, hjust = 0.2, vjust = -0.2)

# Correction of angles across different aspect ratios:

# The angle of the text continues to follow the path even if the
# aspect ratio of the plot changes, for example, during faceting.
# Compare faceting horizontally:

 p <- ggplot(iris, aes(x = Sepal.Length, colour = Species)) +
        geom_textpath(aes(label = Species), stat = "density",
                      size = 6, fontface = 2, hjust = 0.1, vjust = -0.2) +
        scale_y_continuous(limits = c(0, 1.5))

 p + facet_grid(.~Species)

# and faceting vertically:

 p + facet_grid(Species~.)

# label groups of points along their trend line:

 ggplot(iris, aes(x = Sepal.Length, y = Petal.Length)) +
   geom_point(alpha = 0.1) +
   geom_textpath(aes(label = Species, colour = Species),
                 stat = "smooth", method = "loess", formula = y ~ x,
                 size = 7, linetype = 3, fontface = 2, linewidth = 1) +
   scale_colour_manual(values = c("forestgreen", "deepskyblue4", "tomato4")) +
   theme_bw()

# Straight text paths in Cartesian Co-ordinates curve in Polar Co-ordinates

 df <- data.frame(x = 1:1000, y = 1, text = "This is a perfectly flat label")

 p <- ggplot(df, aes(x, y, label = text)) +
   geom_textpath(size = 6)
 p

p + coord_polar(start = pi)
}
